/* Positioning is hard. I'm leaving notes here so I can memorize the concepts enough to struggle through until I get it down.*/
/* Box Level Elements by default stack right on top of eachother!!! */

/* Position Property values: */
/* STATIC - Static tells the element to position itself using normal document flow (default)*/
/* RELATIVE - Relative positioning is still considered part of the normal document flow, but it allows you to tweak an elements position based on offset valzues you assign */
/* ABSOLUTE - Not normal document flow. It removes the element from normal flow and repositions it based on offset values given, allowing others to move into its old position */
/* INHERIT - inherits parent element values */
/* FIXED - Fixed elements are considered to be absolutely positioned but they're always positioned relative to the active view port*/

/* Float Property Values - Left, right, none, inherit */
/* Clear Property specifies what elements cannot float beside the cleared element and on which side. */
/* Clear Values - none (default), left, right, both, inherit */

/* Display Propert: grid; */
/* Draws a grid within a container (has horizonal rows and vertical columns)*/


html {
font-size:10px;
font-family: 'Dosis', 'sans-serif', 'Times New Roman' ; /* Didn't load the first font... I need to look into that... But this has been great to test the back up fonts! */
}

body {
	margin: auto;
	max-width: 80%;
	background-color:black;
}

main {
		margin: auto;
}

header {
	text-align: center; /* Aligns header text to middle of its element*/
	color: #0000ff;
	background-color: #000000;
	border-style: double;
	border-radius: 15px;
	border-width: 1.0rem 0.5rem 1.0rem 0.5rem; /* Starting from left to right, TOP, RIGHT, BOTTOM LEFT*/
	border-bottom-color: #0000ff;
	margin: 5rem 5rem 5rem 5rem; /* If all sides are equal, one value alone is enough. But I like to define them all. I have trouble remembering the what 2 and 3 values affect.*/
	padding: 10px;
}

p {
	font-size: 2rem;
	color: #727272;
}

a {
	font-size: 2rem;
}

a:link {
	color: #001BEA;
	text-decoration: none;  /* "Text decoration is mostly used to remove underlines from links" Thanks w3 schools. */
}

a:visited {
	color: #EA0000;
}

a:hover {
	color: #ffffff;
	text-decoration: underline;
}

a:active {
	color: #ebebe0;
	background-color: #cc3300;
	text-decoration: none;
}


h1 {
	margin: 0px;
	font-size: 4rem;
	color: #727272;

}

h2 {
		font-size: 3.0rem;
		color: #727272;
}

h3 {
	color: white;
	font-size: 3rem;
	padding: 5px;
}

h4 {
	color: white;
	font-size: 2rem;
}

li {
	font-size: 1.8rem;
	line-height: 1.5;
	color: #727272;
}

section {
 width: 75%;
 border-style: double;
 border-color: #0000ff;
 border-radius: 15px;
 border-width: 5px;
 margin: 10px auto 10px auto;
 padding: 25px;

}

footer {
	border-style: dashed;
	border-width: 1px 1px 1px 1px;
	border-color: gray;
	margin: auto;
	text-align: center;
	clear: both;
}

/*  ==========		#id and .class section		==========  */

/*
Following the MDN tutorial on tree column awesomeness, I was able to get this working. I wanted responsive 3 columns with
radii and each its own content. There's enough rules to make this easy, the <h1-2-3-> almost denote each section. I've Tested varying sizes and it acts lthe way I want.
I'm not sure how to improv e the mobile lay out yet... You mentioned on slack something to the effect of "50% of web traffic is from mobile, your site enough be mobile ready"
Or at least passible. I'll rise to that challenge, but I am struggling to find enough time for proper experimentation. Positioning is hard.
*/

.float-better {  /* CONTAINER div. To save time i didnt change the class name. It also helps me remember what this used to be. A nightmare.*/
	margin: 0 auto 0 auto; /* Center left-right within parent element.*/
	padding: 10px;
	width: 80%; /* Basically, fill 75% of parent element with thine self.*/
	column-gap: 10px;
	column-count: 3;
	vertical-align: middle; /* Top and bottom centerage.*/
}

.box1 {
	padding: 5px;
	background-color: red;
	border-radius: 15px;
	break-inside: avoid; /* I really followed the tutorial on this and the page-break-inside property. I got the gist that it would not Break
	the column until there was another <h2-3-4> tag... seems to work fantastic, but the technical function of it is still unclear (or maybe its really that simple...?)*/
	page-break-inside: avoid;
	text-align: center;

}

.box2 {
	padding: 5px;
	background-color: blue;
	border-radius: 15px;
	break-inside: avoid;
	page-break-inside: avoid;
	text-align: center;
}

.box3 {
	padding: 5px;
	background-color: #F28C26;
	border-radius: 15px;
	break-inside: avoid;
	page-break-inside: avoid;
	text-align: center;
}

.p-box {
	color: white;
}

#nav-actual {
	margin: 10px auto 10px auto;
}

.nav-ul {
	list-style-type: none;
	display: block;
	margin: 10px auto 10px auto;
	padding: 10px;
}

.nav-li {
	background-color: black;
	background-image: linear-gradient(to top right, #000000, #727272);
	border-radius: 10px;
 	display: inline;
	padding: 5px 15px 5px 15px;
	margin: 5px;

}
